# Система мониторинга автоклавных вагонеток
Веб-приложение для отслеживания и анализа оборота автоклавных вагонеток с фотографиями, аналитикой и оповещениями в реальном времени.

## Описание проекта
Данная система предназначена для отслеживания перемещения автоклавных вагонеток, сбора фотографий, анализа данных и предоставления интерфейса пользователя для работы с этой информацией. Система включает следующие основные функции:

- Просмотр и фильтрация фотографий вагонеток
- Получение и обработка изображений в реальном времени
- Аналитика данных и статистика
- Уведомления о новых фотографиях и событиях через WebSocket
- Сервисное обслуживание и управление данными

## Технологический стек

### Фронтенд
- React 
- Ant Design
- WebSocket для обновлений в реальном времени
- Axios для HTTP-запросов

### Бэкенд
- Node.js + Express
- WebSocket (ws) для двусторонней связи
- PostgreSQL для хранения данных
- MinIO для хранения фотографий
- Docker для контейнеризации

## Архитектура проекта
Проект построен на основе сервис-ориентированной архитектуры (SOA) и включает следующие компоненты:

1. **Клиентская часть (React)**
   - Сервисная страница
   - Клиентская страница для пользователей
   - Страница с базой данных для аналитики

2. **Серверная часть (Express)**
   - REST API для работы с данными
   - WebSocket сервер для уведомлений в реальном времени
   - Сервисы для работы с фотографиями, архивом и статистикой

3. **Nginx**
   - Обратный прокси для маршрутизации запросов

4. **База данных (PostgreSQL)**
   - Таблицы для хранения данных о вагонетках
   - Триггеры и уведомления для реактивных обновлений

5. **Хранилище объектов (MinIO)**
   - Хранение и выдача фотографий вагонеток

## Установка и запуск

### Предварительные требования
- Docker и Docker Compose
- Node.js 21.x или выше (для локальной разработки)
- PostgreSQL (если запуск без Docker)
- MinIO (если запуск без Docker)

### Запуск с Docker
1. Клонировать репозиторий:
   ```bash
   git clone https://[репозиторий]/photo-cart_cvv.git
   cd photo-cart_cvv
   ```

2. Создать и настроить файл .env в корневой папке (обязательные константы WDS_SOCKET_PORT, WDS_SOCKET_PATH, REACT_PORT и .т.д) не изменяются:
   ```
   WDS_SOCKET_PORT=0
   WDS_SOCKET_PATH=/ws
   REACT_PORT=3000
   EXPRESS_PORT=3001
   REACT_APP_WS_SOCKET_PORT=3001
   MINIO_END_POINT=
   MINIO_PORT=
   MINIO_ACCESS_KEY=
   MINIO_SECRET_KEY=
   MINIO_BUCKET_NAME=su168-screenshot
   DB_HOST=
   DB_PORT=
   DB_USER=
   DB_PASSWORD=
   DB_NAME=
   NODERED_URL=
   ```
   
3. Запустить приложение через Docker Compose:
   ```bash
   docker-compose up -d
   ```

4. Приложение будет доступно по следующим адресам:
   - Пользовательский интерфейс: http://localhost:3210

## Структура проекта
├── client/ # Клиентская часть (React)
│ ├── public/ # Статические файлы
│ └── src/ # Исходный код React
│ ├── components/ # React компоненты
│ │ ├── clientPage/ # Страница 
│ │ ├── servicePage/ # Страница 
│ │ └── tablePage/ # Страница 
│ ├── context/ # React контексты
│ └── App.jsx # Главный компонент приложения
├── server/ # Серверная часть (Express)
│ ├── config/ # Конфигурация подключений
│ ├── services/ # Сервисы
│ │ ├── core/ # Основные сервисы (SOA)
│ │ │ ├── archive/ # Сервис для работы с архивом
│ │ │ ├── photo/ # Сервис для работы с фотографиями
│ │ │ └── statistics/ # Сервис статистики
│ │ └── websocket/ # WebSocket сервис
│ ├── routes.js # Маршруты API
│ └── server.js # Точка входа сервера
├── nginx.conf # Конфигурация Nginx

## Особенности разработки

### WebSocket соединения
Система использует WebSocket для обеспечения обновлений в реальном времени. При получении новых фотографий или удалении существующих, клиенты получают мгновенные уведомления.

### База данных и уведомления
PostgreSQL настроен для отправки уведомлений при изменении данных через механизм LISTEN/NOTIFY. Сервер подписывается на эти уведомления и передает их клиентам через WebSocket.

### Хранение фотографий
Фотографии хранятся в MinIO, что обеспечивает масштабируемое и надежное хранилище объектов, совместимое с S3 API.

## Запуск в продакшн-режиме
Для запуска в производственной среде рекомендуется создать отдельные конфигурационные файлы:

1. Создать `docker-compose.prod.yml`:
   ```yaml
   version: '3'
   services:
     client-build:
       build:
         context: .
         dockerfile: Dockerfile.client.prod
       volumes:
         - client-build:/app/build
   
     server:
       build:
         context: .
         dockerfile: Dockerfile.server.prod
       restart: always
       env_file:
         - .env.prod
   
     nginx:
       image: nginx:alpine
       volumes:
         - ./nginx.prod.conf:/etc/nginx/nginx.conf
         - client-build:/usr/share/nginx/html
       ports:
         - "3210:80"
       restart: always
       depends_on:
         - server
   
   volumes:
     client-build:
   ```

2. Создать соответствующие Dockerfile и конфигурации Nginx для производственной среды.

## Лицензия
[Укажите вашу лицензию]

## Авторы
[Ваши имена и контакты]